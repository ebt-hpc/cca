#!/usr/bin/env python
# -*- coding:utf-8 -*-

'''
  Data provider

  Copyright 2013-2017 RIKEN

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
'''

__author__ = 'Masatomo Hashimoto <m.hashimoto@riken.jp>'

import os
import sys
import json
from pymongo import MongoClient, ASCENDING, DESCENDING
import re
from urllib import urlencode, quote_plus
from datetime import datetime

from common import DEFAULT_USER, OUTLINE_DIR, TARGET_DIR, MONGO_PORT
from common import EXPAND_TARGET_LOOPS, EXPAND_RELEVANT_LOOPS, EXPAND_ALL, COLLAPSE_ALL
from common import compute_state, get_nid_range_tbl


MARKER_CALLEE_PAT = re.compile('^.*(dgemm|timer).*$')

###

def iter_tree(node, f):
    for child in node['children']:
        iter_tree(child, f)
    f(node)

def open_node(node):
    try:
        nstat = node['state']
    except KeyError:
        nstat = {}
        node['state'] = nstat

    nstat['opened'] = True


def iter_subtree(node_tbl, node, f):
    r = int(node['id'])
    lm = int(node['leftmost_id'])
    for i in range(lm, r+1):
        nid = str(i)
        try:
            nd = node_tbl[nid]
            f(nd)
        except Exception, e:
            pass

def iter_parents(parent_tbl, node, f, itself=False):

    if itself:
        f(node)

    nid = node['id']

    while True:
        parent = parent_tbl.get(nid, None)
        if parent:
            f(parent)
            nid = parent['id']
        else:
            break

def expand_all(node_tbl, node):
    iter_subtree(node_tbl, node, open_node)

def expand_loops(node_tbl, parent_tbl, node, key):

    def proc(nd):
        if nd.get(key, False):
            iter_parents(parent_tbl, nd, open_node, itself=True)
            expand_all(node_tbl, nd)

    iter_subtree(node_tbl, node, proc)


def expand_target_loops(node_tbl, parent_tbl, node):
    expand_loops(node_tbl, parent_tbl, node, 'target')

def expand_relevant_loops(node_tbl, parent_tbl, node):
    expand_loops(node_tbl, parent_tbl, node, 'relevant')

def check_node(node):
    node['checked'] = True

def uncheck_node(node):
    if node.has_key('checked'):
        del node['checked']

def handle_comment(node, c):
    
    if c == '':
        if has_key(node['a_attr'], 'title'):
            del node['a_attr']['title']
    else:
        node['a_attr']['title'] = c
        attrs = { 
            'class' : 'jstree-icon comment-icon',
            'role'  : 'presentation',
            'id'    : 'c_'+node['id']
        }
        mark = '<i %s></i>' % ' '.join(['%s="%s"' % p for p in attrs.iteritems()])
        node['text'] = node['text'] + mark
    

def handle_judgment(node, j):
    node['judgment'] = j
    
    x = 'value="%s"' % j
    node['text'] = node['text'].replace(' selected', '').replace(x, x+' selected')

    if node.get('target', False):
        if j != 'NotYet':
            node['text'] = node['text'].replace('class="target_node"',
                                                'class="target_node_completed"')

def mklvid(nid, lv):
    return '%slv%s' % (nid, lv)

def handle_estimation_scheme(node, lv):
    node['estimation_scheme'] = lv
    
    nid = node['id']
    prev_lv = 2
    prev_lv_id = mklvid(nid, prev_lv)
    lv_id = mklvid(nid, lv);
    prev = 'class="on_level %s"' % prev_lv_id
    curr = 'class="on_level %s"' % lv_id
    prev0 = prev+' style="display:table-cell;"'
    curr1 = curr+' style="display:table-cell;"'
    text = node['text'].replace('value="%s"' % prev_lv, 'value="%s"' % lv)
    text = text.replace(prev0, prev).replace(curr, curr1)
    node['text'] = text
    
def setup_target(node_tbl, target_data):
    targets = []
    for nid in target_data:
        try:
            node = node_tbl[nid]
            node['target'] = True
            targets.append(nid)

            rep = 'class="target_node"'
            node['text'] = node['text'].replace('class="node"', rep)

        except KeyError:
            pass

    return targets

def apply_stat(node_tbl, parent_tbl, node_stat_tbl):

    for (nid, stat) in node_stat_tbl.iteritems():
        try:
            node = node_tbl[nid]

            if stat.get(EXPAND_TARGET_LOOPS, False):
                expand_target_loops(node_tbl, parent_tbl, node)

            if stat.get(EXPAND_RELEVANT_LOOPS, False):
                expand_relevant_loops(node_tbl, parent_tbl, node)

            if stat.get(EXPAND_ALL, False):
                expand_all(node_tbl, node)

            if stat.get('checked', False):
                check_node(node)
            else:
                uncheck_node(node)

            if stat.get('opened', False):
                open_node(node)

            if stat.get('comment', None):
                handle_comment(node, stat['comment'])

            if stat.get('judgment', None):
                handle_judgment(node, stat['judgment'])

            if stat.get('estimation_scheme', None):
                handle_estimation_scheme(node, stat['estimation_scheme'])

        except KeyError:
            pass

TEXT_FMT0 = '''
<span class="%(code_style)s">%(code)s</span>
[<span class="code">%(pu)s</span>:%(fname)s:%(start)s-%(end)s]
%(form)s
'''.replace('\n', '')

TEXT_FMT = '''
<table class="node">
<tr>
<td>%(text)s</td>
%(others)s
<td>
<label class="es">ES</label>:
<input class="estimation-scheme" disabled="true" name="value" value="2"></input>
<label class="es">,</label>
</td>
%(ess)s
<td>
<select class="judgment">
<option value="NotYet" selected>Not Completed Yet</option>
<option value="NonKernel">Not a Kernel</option>
<optgroup label="A Kernel:">
<option value="M1">&nbsp;&nbsp;M1: Low B/F & for DGEMM</option>
<option value="M2">&nbsp;&nbsp;M2: Low B/F & for Cache Blocking</option>
<option value="M3">&nbsp;&nbsp;M3: Low B/F & Simple Loop Body</option>
<option value="M4">&nbsp;&nbsp;M4: Low B/F & Complex Loop Body</option>
<option value="M5">&nbsp;&nbsp;M5: High B/F & Direct Array Ref.</option>
<option value="M6">&nbsp;&nbsp;M6: High B/F & Indirect Array Ref.</option>
<option value="Other">&nbsp;&nbsp;Other Kernel</option>
</optgroup>
<option value="Ignored">Ignored</option>
</select>
</td>
</tr>
</table>
'''.replace('\n', '')

METRICS_LINE_FMT = '''
<td %(attr)s>%(others)s</td>
<td %(attr)s><span class="byte">B</span>/<span class="flops">F</span>:%(bf)s</td>
<td %(attr)s><div class="bar"><div class="barValue" style="width:%(perc)s%%;"></div></div></td>
'''.replace('\n', '')


def get_last_nid(user, proj, ver, fid):
    result = None
    try:
        cli = MongoClient('localhost', MONGO_PORT)
        col = cli.loop_survey.log

        query = {
            'user':user,
            'proj':proj,
            'ver':ver,
            'judgment':{'$exists':True},
            'nid':{'$exists':True},
        }

        records = col.find(query).sort('time', DESCENDING)

        nid_range_tbl = get_nid_range_tbl(OUTLINE_DIR, proj, ver)

        (lmi, i) = nid_range_tbl[fid]

        for record in records:
            nid = int(record['nid'])
            if lmi < nid < i:
                result = str(nid)
                break

    except Exception, e:
        pass

    return result


###

import cgi
import cgitb
cgitb.enable()

form = cgi.FieldStorage()

user = form.getvalue('user', DEFAULT_USER)
proj = form.getvalue('proj', None)
ver  = form.getvalue('ver', None)
path = form.getvalue('path', None)
fid  = form.getvalue('fid', None)


node_tbl = {} # nid -> node
parent_tbl = {} # nid -> node

def make_metrics_line_per_lv(lv, i, others, bf, perc, display):
    lv_id = mklvid(i, lv)
    attr = 'class="on_level %s"%s' % (lv_id, ' style="display:table-cell;"' if display else '')
    others[lv].sort();
    line = METRICS_LINE_FMT % { 'attr'   : attr,
                                'others' : ''.join(others[lv]),
                                'bf'     : bf[lv],
                                'perc'   : perc[lv],
    }
    return line;


tree_data = {}
target_data = {}

if proj and ver and fid:
    #TIME_TBL = {}

    pid = re.sub(r'_git$', '.git', proj)

    pi_tbl = {}
    vi_tbl = {}
    proj_dir = os.path.join(OUTLINE_DIR, proj)
    try:
        with open(os.path.join(proj_dir, 'index.json'), 'r') as pif:
            pi_tbl = json.load(pif)

        with open(os.path.join(proj_dir, 'v', ver, 'index.json'), 'r') as vif:
            vi_tbl = json.load(vif)

    except Exception, e:
        pass

    vkind = pi_tbl.get('ver_kind', 'REL')
    vid = vi_tbl.get('vid', ver)

    common_params = {
        'ver'  : ver,
    }

    git_url0 = '/gitweb/?p=%s;a=blob_plain;f=' % pid
    git_url1 = ';h='
    git_url2 = ';hb='+vid

    url0 = 'projects/' + proj + '/'

    def mkurl_git(encoded_path, fid, vid):
        u = ''.join([git_url0, encoded_path, git_url1, fid, git_url2])
        return u

    encoded_path_tbl = {}
    def get_encoded_path(path):
        encoded = None
        try:
            encoded = encoded_path_tbl[path] 
        except KeyError:
            encoded = quote_plus(path)
            encoded_path_tbl[path] = encoded
        return encoded

    def get_link_form(obj):
        path = obj['loc']
        encoded_path = get_encoded_path(path)

        if vkind == 'GITREV':
            url = mkurl_git(encoded_path, obj['fid'], vid)
        else:
            url = url0 + path

        params = common_params.copy()

        params['path'] = path
        params['src']  = url

        startl = obj.get('start_line', None)
        endl   = obj.get('end_line', None)

        if startl and endl:
            params['startl'] = startl
            params['endl']   = endl

        aref_ranges = obj.get('aref_ranges', None)
        if aref_ranges:
            params['aref_ranges'] = json.dumps(aref_ranges)

        fl = []
        fl.append('<form style="display:inline;" name="form_%s" method="POST" action="openviewer" target="_blank">' % obj['id'])
        for kv in params.iteritems():
            fl.append("<input type='hidden' name='%s' value='%s'>" % kv)
        fl.append('</form>')

        form = ''.join(fl)

        return form

    def get_code_style(obj):
        style = 'code'

        if obj.has_key('callee_name'):
            m = MARKER_CALLEE_PAT.match(obj['callee_name'])
            if m:
                style = 'marker-call'

        return style
            

    def hook(obj):
        if obj.has_key('id'):
            nid = obj['id']
            node_tbl[nid] = obj
            for c in obj['children']:
                parent_tbl[c['id']] = obj

            link_form = ''

            if nid != '#':
                link_form = get_link_form(obj)
                obj['a_attr'] = {}

            if obj.has_key('code'):
                text = TEXT_FMT0 % { 
                    'code'       : obj['code'],
                    'code_style' : get_code_style(obj),
                    'pu'         : obj['pu'],
                    'fname'      : os.path.basename(obj['loc']),
                    'start'      : obj['start_line'],
                    'end'        : obj['end_line'],
                    'form'       : link_form,
                }

                if obj.has_key('bf0') or obj.has_key('bf1') or obj.has_key('bf2'):

                    bf = [obj['bf0'], obj['bf1'], obj['bf2']]
                    others_lv = [[], [], []]
                    others = ''

                    if obj.has_key('other_metrics'):
                        for (m, v) in obj['other_metrics'].iteritems():

                            x = '<span class="metrics">%s</span>:%s,' % (m, v)

                            if m in ('AR0', 'IAR0', 'DAR0'):
                                others_lv[0].append(x)

                            elif m in ('AR1', 'IAR1', 'DAR1'):
                                others_lv[1].append(x);

                            elif m in ('AR2', 'IAR2', 'DAR2'):
                                others_lv[2].append(x);

                            else:
                                others += x;

                        others = '<td>%s</td>' % others

                    perc = [int(f * 100.0 / (f + 1.0)) for f in bf]
                    bff = ['%3.2f' % f for f in bf]
                    lv_id = [nid+'lv0', nid+'lv1', nid+'lv2']
                    lvs = [
                        make_metrics_line_per_lv(0, nid, others_lv, bff, perc, False),
                        make_metrics_line_per_lv(1, nid, others_lv, bff, perc, False),
                        make_metrics_line_per_lv(2, nid, others_lv, bff, perc, True),
                    ]

                    text = TEXT_FMT % { 'text'   : text,
                                        'others' : others, 
                                        'ess'    : ''.join(lvs),
                    }


                obj['text'] = text

        return obj


    try:
        ver_path = os.path.join(OUTLINE_DIR, proj, 'v', ver)
        tree_data_path = os.path.join(ver_path, path, fid+'.json')
        if not os.path.exists(tree_data_path):
            tree_data_path = os.path.join(ver_path, fid+'.json') #!!!!! obsoleted

        with open(tree_data_path, 'r') as treef:
            #st = datetime.now()
            tree_data = json.load(treef, object_hook=hook)
            #TIME_TBL['time0'] = (datetime.now() - st).total_seconds()

    except Exception, e:
        tree_data['failure'] = str(e)

    if tree_data:
        try:
            with open(os.path.join(TARGET_DIR, proj, ver+'.json'), 'r') as targetf:
                target_data = json.load(targetf)

        except Exception, e:
            pass

        try:
            #st = datetime.now()

            stat_data = compute_state(user, proj, ver)

            if target_data:
                ts = setup_target(node_tbl, target_data)
                tree_data['targets'] = ts

            if stat_data.get('node_stat', None):
                apply_stat(node_tbl, parent_tbl, stat_data['node_stat'])

            tree_data['text'] = '%s (%d nodes)' % (tree_data['text'], len(node_tbl))

            last_nid = get_last_nid(user, proj, ver, fid)
            if last_nid:
                tree_data['last_nid'] = last_nid

            #TIME_TBL['time1'] = (datetime.now() - st).total_seconds()

        except Exception, e:
            #tree_data['failure'] = str(e)
            raise

else:
    bad = []
    if not proj:
        bad.append('proj')

    if not ver:
        bad.append('ver')

    if not fid:
        bad.append('fid')

    tree_data['failure'] = 'not specified: %s' % ', '.join(bad)


TEMPL = '''Content-Type: application/json

%s
'''

#st = datetime.now()
#json_str = json.dumps(tree_data)
#TIME_TBL['time2'] = (datetime.now() - st).total_seconds()
#print(TEMPL % json.dumps(TIME_TBL))

print(TEMPL % json.dumps(tree_data))
